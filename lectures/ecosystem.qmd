---
title: "The R Ecosystem"
format: 
    revealjs:
      scrollable: true
execute:
  echo: true
---



## Where the packages live

```{r, echo = FALSE}

repo = c( "[CRAN](https://cran.r-project.org/)",
          "[Github](https://github.com/)",
          "[Bioconductor](https://bioconductor.org/)",
          "[R-forge](https://r-forge.r-project.org/)" )
cur = c("curated", "open", "curated", "open?")
typ = c("Distr", "Devel", "Both", "Devel?")
sw  = c("SVN", "git", "git", "SVN")
ins = c("`install.packages`", "`devtools::install_github`",
        "`BiocManager::install`", "`install.packages` with repo set")
tab = cbind(Repository = repo,
            Curation = cur, Type = typ, VCS = sw, Installer = ins)
knitr::kable(tab)
```

## Comprehensive R Archive Network 

* Read the [Policy](https://cran.r-project.org/web/packages/policies.html)
* Write the package
* Test the package
* Submit for review / acceptance

    - [Submission form](https://cran.r-project.org/web/packages/policies.html)
    - [Submission checklist](https://cran.r-project.org/web/packages/submission_checklist.html)

* Maintain the package: re-submit

## Github

* Get an account ([Help](https://help.github.com/en/github))
* Start a repository
* Set up an R package (using `devtools`) and set origin
* Done

## Bioconductor | R for bioinformatics

* Read the [Package guidelines](https://bioconductor.org/developers/package-guidelines/) and [Coding style](https://bioconductor.org/developers/how-to/coding-style/)

* Start a repository on Github

* Write & test your package 

* Submit your package repo to the Bioconductor Contributions repo ([Submission process](https://bioconductor.org/developers/package-submission)
)

* Maintain:

    - A development branch (`master`)
    - Current release branch (`RELEASE_x_y`, currently 3.10)

-----

* Focused on high-throughput genomic analysis

* Tightly coupled package versions with bi-annual releases

    - Use their own installer, package `BiocManager` (on CRAN)
    - Regular, often massive re-installations

* Run their own git server, but recommend keeping a sync on Github (two remotes)

* Nice [developer ressources](https://bioconductor.org/developers/)


## R-forge 

* Run by `r-project.org`

* Installation via

```r
install.packages("mypackage", repos = c("http://R-Forge.R-project.org",
"http://your.nearest.CRAN.mirror.org"), dependencies = TRUE)
```
* Workflow: ?? Little info visible (without an account?)



## _Working with other packages_

Can mean:

* importing functionality from installed packages

* adding code, modifications to existing packages which are not yours 

* including code from other packages into your own

Technical, legal, social, philosophical implications

General advice:

* Don't worry too much (DWTM)
* Rapid prototyping, iterative improvement 
* _"Quality of life, quality of research (code)"_


## Depends, Imports, Suggests, Enhances: use one

Your package uses another installed package to do something:

* Your package: `mypkg`
* Other package: `otherpkg`

__Depends:__

* `otherpkg` necessary for installing `mypkg`
* After `library(mypkg)`, `otherpkg` will be in the search path for the user
* Use case: `mypkg` really only makes sense in the context of `otherpkg`, e.g. `latticeExtra` and `lattice` 
* Recommend: use rarely

__Imports:__

* `otherpkg` necessary for installing `mypkg`
* Functions etc. in `otherpkg` will be used internally by `mypkg`
* Details can be controlled in `NAMESPACE`
* Recommend: use this for necessary packages

__Suggests:__

* `otherpkg` NOT necessary for installing `mypkg` 
* For packages only used in examples, vignettes, tests
* Typical use case: example data from another package

__Enhances:__

* `otherpkg` NOT necessary for installing `mypkg` 
* When `mypkg` adds functionality to `otherpkg`
* Use case: `mypkg` has extra methods for classes defined in `otherpkg`

Reference: _Writing R Extensions_, Section 1.1.3

## NAMESPACE specification

Reference: _Writing R Extensions_, Section 1.5

###  Exports 

* Only exported functions are visible after `library(mypkg)` or via `mypkg::`
* Unexported functions are available as `mypkg:::`
* Suggestion: 

    - start with default (export all, `exportPattern("^[^\\.]")`),
    - add `@export`-tags before release
    - don't export hacks, functions you don't document

## Imports

* `import(otherpkg)` in NAMESPACE corresponds to `library(otherpkg)` in linear code
* Qualified names `otherpkg::` will work without `import`/`importFrom`
* Suggestion: 

    - `@Ã¬mport` important packages at start (replace `library`)
    - use qualified names  during development
    - switch to `@import` when you get tired of `otherpkg::`
    - before release, check whether to replace `@import` with `@importFrom`
    - use qualified names when in doubt
    
## Contributing to other packages

* Report issues: informatively, politely (minimal replicable example)

* Add fixes via _forking_:

    - establish a private copy of a package (dead easy on Github)
    - make modifications
    - offer modifications to package owner (_pull request_)
    - Alt.: if the licence allows, go rogue with your own (_forked_) version 
    
        + Nuclear option
        + Give credit
        + Change names, trademarks

* Play nice: e.g. `ggplot2` [code of conduct](https://github.com/tidyverse/tidyverse.org/blob/master/CODE_OF_CONDUCT.md)

Ressources:

* [Forking](https://en.wikipedia.org/wiki/Fork_(software_development)) on Wikepedia
* [Legal aspects](https://opensource.stackexchange.com/questions/1154/how-does-githubs-forking-right-cope-with-an-all-rights-reserved-project/1157) of forking on Github

## Using material from other packages in your own

* Legal under open source licence _under certain conditions_

    - E.g.: "viral" property of GPL

* For legal & ethical reasons: _give credit_

## We have to talk about licenses

Software licensing matters in research, same as data protection & citation rules.

[Licensing R](https://thinkr-open.github.io/licensing-r/): not a legal document, but 

* overview of current practice
* overview of open source (vs proprietary) licenses

## Do I have to share? 

* No.

* But you should think about it:

    - private vs public package: who to share with?
    - open vs proprietary licence
    - open access and open source

# Have fun



